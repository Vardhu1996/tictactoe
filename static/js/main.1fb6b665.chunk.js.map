{"version":3,"sources":["Components/Square.js","Components/Board.js","Game.js","index.js"],"names":["Square","value","onClick","className","calculateWinner","squares","lines","i","length","a","b","c","Board","state","xIsNext","handleClick","number","newSquares","setState","handleReset","status","this","winner","tie","count","checkForTie","Component","Game","ReactDOM","render","document","getElementById"],"mappings":"mMAOeA,G,KAJA,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,QAAT,OACf,wBAAQC,UAAU,SAASD,QAASA,EAApC,SAA8CD,MCExCG,EAAkB,SAAAC,GAepB,IAdA,IAAMC,EAAQ,CAEV,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GAEL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GAEL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAGDC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAI,mBAEjBD,EAAMC,GAFW,GAE1BE,EAF0B,KAExBC,EAFwB,KAEtBC,EAFsB,KAKjC,GACIN,EAAQI,IAERJ,EAASI,IAAOJ,EAAQK,IAExBL,EAAQI,IAAMJ,EAAQM,GAEtB,OAAON,EAAQI,GAIvB,MAAO,IAwFIG,E,4MAnEXC,MAAQ,CACJR,QAAS,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAClCS,SAAU,G,EAGdC,YAAc,SAAAC,GAAM,OAAI,WAEpB,IAAGZ,EAAgB,EAAKS,MAAMR,WAAY,EAAKQ,MAAMR,QAAQW,GAA7D,CAGA,IAAMC,EAAU,YAAO,EAAKJ,MAAMR,SAGlCY,EAAWD,GAAU,EAAKH,MAAMC,QAAU,IAAM,IAChD,EAAKI,SAAS,CAACb,QAAQY,EAAYH,SAAS,EAAKD,MAAMC,a,EAG3DK,YAAc,WACV,EAAKD,SAAS,CACVb,QAAS,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAClCS,SAAU,EAAKD,MAAMC,W,uDAKpB,IAGDM,EAHA,EACwBC,KAAKR,MAA1BR,EADH,EACGA,QAASS,EADZ,EACYA,QACVQ,EAASlB,EAAgBiB,KAAKR,MAAMR,SAE1C,GAAGiB,EACCF,EAAM,oBAAgBE,OACrB,CACD,IAAIC,EAjDI,SAAAlB,GAEhB,IADA,IAAImB,EAAQ,EACJjB,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IACb,MAAfF,EAAQE,IAA6B,MAAfF,EAAQE,IAC7BiB,IAGR,OAAa,IAAVA,GACQ,cAyCOC,CAAYJ,KAAKR,MAAMR,SAE7Be,EADDG,GAGO,qBAAiBT,EAAU,IAAM,KAI/C,OACI,sBAAKX,UAAU,QAAf,UACI,6BAAKiB,IAEL,sBAAKjB,UAAU,MAAf,UACA,cAAC,EAAD,CAAQF,MAAOI,EAAQ,GAAIH,QAASmB,KAAKN,YAAY,KACrD,cAAC,EAAD,CAAQd,MAAOI,EAAQ,GAAIH,QAASmB,KAAKN,YAAY,KACrD,cAAC,EAAD,CAAQd,MAAOI,EAAQ,GAAIH,QAASmB,KAAKN,YAAY,QAGrD,sBAAKZ,UAAU,MAAf,UACA,cAAC,EAAD,CAAQF,MAAOI,EAAQ,GAAIH,QAASmB,KAAKN,YAAY,KACrD,cAAC,EAAD,CAAQd,MAAOI,EAAQ,GAAIH,QAASmB,KAAKN,YAAY,KACrD,cAAC,EAAD,CAAQd,MAAOI,EAAQ,GAAIH,QAASmB,KAAKN,YAAY,QAGrD,sBAAKZ,UAAU,MAAf,UACA,cAAC,EAAD,CAAQF,MAAOI,EAAQ,GAAIH,QAASmB,KAAKN,YAAY,KACrD,cAAC,EAAD,CAAQd,MAAOI,EAAQ,GAAIH,QAASmB,KAAKN,YAAY,KACrD,cAAC,EAAD,CAAQd,MAAOI,EAAQ,GAAIH,QAASmB,KAAKN,YAAY,QAErD,wBAAQZ,UAAU,QAAQD,QAASmB,KAAKF,YAAxC,0B,GA/DIO,aC3CLC,E,uKANP,OAAO,8BACH,cAAC,EAAD,U,GAHOD,aCDnBE,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,U","file":"static/js/main.1fb6b665.chunk.js","sourcesContent":["import React from 'react'\nimport \"../GameStyles.css\"\n\nconst Square = ({value, onClick}) => (\n<button className=\"Square\" onClick={onClick}>{value}</button>\n)\n\nexport default Square;","// Imports\nimport React, {Component} from 'react'\nimport Square from \"./Square\"\nimport \"../GameStyles.css\"\n\n// Calculate winner\nconst calculateWinner = squares => {\n    const lines = [\n        // Horizontal\n        [0,1,2],\n        [3,4,5],\n        [6,7,8],\n        // Vertical \n        [0,3,6],\n        [1,4,7],\n        [2,5,8],\n        // Diagonal\n        [0,4,8],\n        [2,4,6]\n    ]\n\n    for(let i = 0; i < lines.length; i++){\n        // Get current line : horizontal, vertical or diagonal\n        const [a,b,c] = lines[i]\n        \n        // Check we have x or o in position a\n        if( // Not empty\n            squares[a] && \n            // Same as B\n            squares [a] ==  squares[b] && \n            // Same as C\n            squares[a] == squares[c]){\n            // Return element\n            return squares[a]\n        }\n    }\n\n    return ''\n}\n\n// Check for tie game\nconst checkForTie = squares => {\n    let count = 0;\n    for(let i = 0; i < squares.length; i++){\n        if(squares[i] === 'X' || squares[i] === 'O'){\n            count++\n        }\n    }\n    if(count === 9){\n        return 'Tie, reset.';\n    }else{\n        return false\n    }\n}\n\n// Class component\nclass Board extends Component {\n    // State\n    state = {\n        squares: ['','','','','','','','',''],\n        xIsNext : true\n    }\n\n    handleClick = number => () => {\n        // Prevent double clicking\n        if(calculateWinner(this.state.squares) || this.state.squares[number]){\n            return \n        }\n        const newSquares = [...this.state.squares]\n        \n        // const newSquares = this.state.squares.slice()\n        newSquares[number] = this.state.xIsNext ? 'X' : 'O'\n        this.setState({squares:newSquares, xIsNext:!this.state.xIsNext})\n    }\n\n    handleReset = () => {\n        this.setState({\n            squares: ['','','','','','','','',''],\n            xIsNext: !this.state.xIsNext\n        })\n        \n    }\n\n    render(){\n        const {squares, xIsNext}  = this.state\n        const winner = calculateWinner(this.state.squares)\n        let status \n        if(winner){\n            status = `Winner is ${winner}`\n        }else{\n            let tie = checkForTie(this.state.squares)\n            if(tie){\n                status = tie\n            }else{\n                status = `Next step: ${xIsNext ? 'X' : 'O'}`\n            }\n        }\n        \n        return(\n            <div className=\"Board\">\n                <h1>{status}</h1>\n                {/* Row 1 */}\n                <div className=\"Row\">\n                <Square value={squares[0]} onClick={this.handleClick(0)}/>\n                <Square value={squares[1]} onClick={this.handleClick(1)}/>\n                <Square value={squares[2]} onClick={this.handleClick(2)}/>\n                </div>\n                {/* Row 2 */}\n                <div className=\"Row\">\n                <Square value={squares[3]} onClick={this.handleClick(3)}/>\n                <Square value={squares[4]} onClick={this.handleClick(4)}/>\n                <Square value={squares[5]} onClick={this.handleClick(5)}/>\n                </div>\n                {/* Row 3 */}\n                <div className=\"Row\">\n                <Square value={squares[6]} onClick={this.handleClick(6)}/>\n                <Square value={squares[7]} onClick={this.handleClick(7)}/>\n                <Square value={squares[8]} onClick={this.handleClick(8)}/>\n                </div>     \n                <button className=\"Reset\" onClick={this.handleReset}>Reset</button>        \n            </div>\n        )\n    }\n}\n\nexport default Board;","// Imports\nimport React, {Component} from 'react'\nimport Board from \"./Components/Board\"\nimport \"./GameStyles.css\"\n\nclass Game extends Component {\n    render(){\n        return <div>\n            <Board />\n        </div>\n    }\n}\n\nexport default Game;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Game from \"./Game\"\n\nReactDOM.render(<Game />, document.getElementById('root'))"],"sourceRoot":""}